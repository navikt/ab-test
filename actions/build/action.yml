name: 'Build A/B-Test Distributions'
description: 'Iterates through test branches and creates distribution stored in the workflow container.'
inputs:
  master-branch:
    description: 'Name of master (default) branch in repository.'
    required: false
    default: 'master'
  test-branch-prefix:
    description: 'Prefix used for test branches in repository.'
    required: false
    default: 'ab-test/'
  build-script:
    description: 'Name of the npm script to run in order to build distribution.'
    required: false
    default: 'build'
  dist-directory:
    description: 'Name of the output directory for the build script.'
    required: false
    default: 'dist'
  output-directory:
    description: 'Name of the desired output directory containing all distributions.'
    required: false
    default: 'dist'
runs:
  using: "composite"
  steps:
    - name: 'make temporary folder'
      shell: bash
      run: |
        mkdir tmp

    - name: 'build master branch distribution'
      env:
        MASTER_BRANCH: ${{ inputs.master-branch }}
        BUILD_SCRIPT: ${{ inputs.build-script }}
        DIST_DIRECTORY: ${{ inputs.dist-directory }}
      shell: bash
      run: ${{ github.action_path }}/build-master-branch.sh

    - name: 'build test branch distributions'
      env:
        TEST_BRANCH_PREFIX: ${{ inputs.test-branch-prefix }}
        BUILD_SCRIPT: ${{ inputs.build-script }}
        DIST_DIRECTORY: ${{ inputs.dist-directory }}
      shell: bash
      run: ${{ github.action_path }}/build-test-branches.sh
     #   git branch -r |
     #   grep --line-buffered ${{ inputs.test-branch-prefix }} |
     #   awk '{n=split($0,a,"${{ inputs.test-branch-prefix  }}"); print a[n]}' |
     #   xargs -L1 >> ab-test-branches.tmp &&
     #   [[ $(sed -n '=' ab-test-branches.tmp | wc -l) -gt 0 ]] &&
     #   while read -r l; do
     #     git checkout "${{ inputs.test-branch-prefix }}$l";
     #     npm install && npm run ${{ inputs.build-script }};
     #     mkdir tmp/"$l";
     #     cp -r ${{ inputs.dist-directory }}/* tmp/"$l"/;
     #     git reset --hard;
     #   done < ab-test-branches.tmp &&
     #   git checkout $GITHUB_REF

    - name: 'prepare output folder'
      shell: bash
      run: |
        rm -rf ${{ inputs.output-directory }} || true &&
        mkdir ${{ inputs.output-directory }} &&
        mv tmp/* ${{ inputs.output-directory }}

    - name: 'clean up'
      shell: bash
      run: |
        rm -r **tmp
